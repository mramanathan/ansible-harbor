---
  - name: Create "{{ harbor_process_group }}"  group
    group:
      name: "{{ harbor_process_group }}"
      state: present

  - name: Create "{{ harbor_process_owner }}"  user
    user:
      name: "{{ harbor_process_owner }}"
      group: "{{ harbor_process_group }}"
      create_home: no
      shell: /bin/false
      state: present

  - name: Allow Harbor user to run Docker commands without sudo
    user:
      name: "{{ harbor_process_owner }}"
      groups: docker
      append: yes

  - name: Gather facts on EC2
    ec2_metadata_facts:
    when:
      - platform_type == "aws"
      - machine_type  == "ec2"

  - name: Set public IPv4 address for "{{ machine_type }}" instance in "{{ platform_type }}"
    set_fact:
      ipv4_address: "{{ ansible_ec2_public_ipv4 }}"
    when:
      - ipv4_address is undefined
      - platform_type == "aws"
      - machine_type  == "ec2"

  - name: Set public IPv4 address of 'eth1' interface if the VM type is "{{ platform_type }}"
    set_fact:
      ipv4_address:  "{{ ansible_facts['eth1']['ipv4']['address'] }}"
    when:
      - ipv4_address is undefined
      - platform_type == "local"
      - machine_type  == "vagrant"

  - name: Check and set home for Harbor installation
    set_fact:
      harbor_home="/opt/harbor"
    when: harbor_home is undefined

  - name: Check and set Harbor port
    set_fact:
      harbor_port="1729"
    when: harbor_port is undefined

  - name: Check for version of Harbor to install
    set_fact:
      harbor_version="2.0.0"
    when: harbor_version is undefined

  - name: Create harbor folder
    file:
      path: "{{ harbor_home }}"
      state: directory
      mode: '0755'
      owner: "{{ harbor_process_owner }}"
      group: "{{ harbor_process_group }}"

  - name: Download harbor
    unarchive:
      src: https://github.com/goharbor/harbor/releases/download/v{{ harbor_version}}/harbor-online-installer-v{{ harbor_version }}.tgz
      dest: "{{ harbor_home }}"
      remote_src: yes

  - name: Copy harbor.yml.tmpl to harbory.yml
    synchronize:
      src: "{{ harbor_home }}/harbor/harbor.yml.tmpl"
      dest: "{{ harbor_home }}/harbor/harbor.yml"
    delegate_to: "{{ inventory_hostname }}"

  - name: Update ipv4 address to access the harbor
    lineinfile:
      path: "{{ harbor_home }}/harbor/harbor.yml"
      regexp: '^hostname: (.*)$'
      line: "hostname: {{ ipv4_address }}"

  - name: Update http port
    lineinfile:
      path: "{{ harbor_home }}/harbor/harbor.yml"
      regexp: '^  port: 80$'
      line: "  port: {{ harbor_port }}"

  - name: Disable https
    replace:
      path: "{{ harbor_home }}/harbor/harbor.yml"
      regexp: '^https:(.*)'
      replace: '#\1'
    when:
      - harbor_access == "http"

  - name: Disable https port
    replace:
      path: "{{ harbor_home }}/harbor/harbor.yml"
      regexp: '(.*port: 443.*)'
      replace: '#\1'
    when:
      - harbor_access == "http"

  - name: Disable certifacte entry
    replace:
      path: "{{ harbor_home }}/harbor/harbor.yml"
      regexp: '(.*certificate:.*)'
      replace: '#\1'
    when:
      - harbor_access == "http"

  - name: Disable private key entry
    replace:
      path: "{{ harbor_home }}/harbor/harbor.yml"
      regexp: '(.*private_key:.*)'
      replace: '#\1'
    when:
      - harbor_access == "http"

  - name: Bare bone vanilla Harbor, with no add-ons
    command: "./prepare"
    args:
      chdir: "{{ harbor_home }}/harbor"
    register: harbor_prepare

  - name: Start Harbor
    docker_compose:
      project_src: "{{ harbor_home }}/harbor"
      state: present
    notify: setup insecure registry
    when: harbor_prepare.changed
    register: compose_up

  - name: Check Harbor installation status
    shell: "docker-compose ps"
    args:
      chdir: "{{ harbor_home }}/harbor"
    when: compose_up.changed
    register: compose_ps

  - name: List of active Harbor containers
    debug: msg="{{ compose_ps.stdout }}"

  - name: Emit Harbor URL
    command: echo "Harbor can be accessed at, http://{{ ipv4_address }}:{{ harbor_port }}"
    when: compose_up.changed
    register: harbor_url

  - name: Harbor URL info
    debug: msg="{{ harbor_url.stdout }}"
